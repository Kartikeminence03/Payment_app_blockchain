LyMUfuAzyG9mPn/PhrvGGA==

project in ID =  60dbf16ffcda974a7ac01afc87477e54

Web3Modal Quick Start = npx create-wc-dapp@latest web3modal-quickstart -id 60dbf16ffcda974a7ac01afc87477e54 -y


Stripe Publishable key = pk_test_51OApPrSGgPa6DtpSCUQ5tquKu3RnLcSPhGeTWhBvzpSgdJoj67mdMv4TelETIwZDdxsrNSp6wIkvE8IryaiL5S2X00yxZBBmLS

Stripe Secret key = sk_test_51OApPrSGgPa6DtpSTRBiD33iYvP8BJqhv0GGOfTUz8CywSlfgC2j8NMMpK76PWmUqmOI4iSmEqmf87aEVP9vn9WI00jcfYALdW











import React, { useEffect, useState } from 'react'
import "./Cart.css"
import {loadStripe} from '@stripe/stripe-js';
import axios from 'axios';
import { ethers } from 'ethers'
import { baseUrl } from '../../backend_Url/baseUrl';
import digiSoul from '../../abi/DigiSoul.json';
import tokenPresale from '../../abi/TokenPreSale.json';
import usdtAbi from '../../abi/usdt.json';
import usdcAbi from '../../abi/usdc.json'

const style ={
  display: "inline-block",
  position: "relative",
}

const style1 ={
  width: "300px"
}

const Cart = () => {
  const [provider, setProvider] = useState(null)
  const [payInput, setPayInput] = useState("");
  const [tokenETH,setTokenETH] = useState();
  const [buttonDisabled, setButtonDisabled] = useState(false);
  const [account, setAccount] = useState("");
  const [refundToken, setRefundToken] = useState("");
  const [claimToken, setClaimToken] = useState("");
  const [metaAccount, setMetaAccount] = useState(null);
  const [currencys, setCurrencys] = useState("ETH");

  const tokenPresaleaddress = process.env.REACT_APP_TOKENPRESALEADDRESS;
  // const inputpay = document.getElementById("pay-input").value;
  // const payinput_inNum = 1;
  // const payDsoulETH = payinput_inNum*10**18;
  // const payDsoulUSDT = payinput_inNum*10**6;
  // console.log(typeof payinput_inNum)

  const loadBlockchainData = async()=>{
    const provider = new ethers.BrowserProvider(window.ethereum);
    // console.log(await provider?.getSigner(),"-----.....>>>>>>>>>");
    setProvider(provider);
    // const network = await provider.getNetwork();
    // console.log('provider', network.name);
    // setTokenYouGet(tokenYouGetInNum)


    // const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })
    // const account = ethers.getAddress(accounts[0])
    // setMetaAccount(account)
  }
  


  const ethToken = async ()=>{
    try{
      const signer = await provider.getSigner();
      const inputpay = document.getElementById("pay-input").value;
      const payDsoulETH = Number(inputpay)*10**18;
      // console.log("ETH");
      const tokenPresaleContract = new ethers.Contract(tokenPresaleaddress, tokenPresale.abi, provider)
      const tokenPresaleContractWithSigner = tokenPresaleContract.connect(signer);
      const RecieveTokens = await tokenPresaleContractWithSigner.getTokenAmountForEth(payDsoulETH.toString());
      const recieveToken_inNum = parseInt(RecieveTokens)
      const RecieveTokens1 = recieveToken_inNum/10**18;
      setTokenETH( RecieveTokens1);
    } catch(err) {
      console.log(err);
    }
  };

  const usdtToken =async ()=>{
    // console.log("USDT");
    const signer = await provider.getSigner();
    const inputpay = document.getElementById("pay-input").value;
    const payDsoulUSDT = Number(inputpay*10**6)
    const tokenPresaleContract = new ethers.Contract(tokenPresaleaddress, tokenPresale.abi, provider)
    const tokenPresaleContractWithSigner = tokenPresaleContract.connect(signer);
    const RecieveTokens = await tokenPresaleContractWithSigner.getTokenAmountForUsdt(payDsoulUSDT.toString());
    setTokenETH(Number(RecieveTokens)/10**18);
  };


  const usdcToken = async()=>{
    // console.log("USDC");
    const signer = await provider.getSigner();
    const inputpay = document.getElementById("pay-input").value;
    const payDsoulUSDT = Number(inputpay*10**6)
    const tokenPresaleContract = new ethers.Contract(tokenPresaleaddress, tokenPresale.abi, provider)
    const tokenPresaleContractWithSigner = tokenPresaleContract.connect(signer);
    const RecieveTokens = await tokenPresaleContractWithSigner.getTokenAmountForUsdc(payDsoulUSDT.toString());
    setTokenETH(Number(RecieveTokens)/10**18);
  };



  const payWithETH = async ()=>{
    try {
      console.log("Eth");
    const signer = await provider.getSigner();
    const inputpay = document.getElementById("pay-input").value;
    const payDsoulETH = Number(inputpay)*10**18;
    const tokenPresaleContract = new ethers.Contract(tokenPresaleaddress, tokenPresale.abi, provider);
    const tokenPresaleContractWithSigner = tokenPresaleContract.connect(signer);
    const buy =  await tokenPresaleContractWithSigner.buyWithEth({value: payDsoulETH.toString()});
    const buyReciept = await buy.wait();
    } catch (error) {
      console.log(error)
    }
  };

  const payWithUSDT = async ()=>{
    console.log("USDT");
    try {
      const signer = await provider.getSigner();
    const inputpay = document.getElementById("pay-input").value;
    const payDsoulUSDT = Number(inputpay*10**6)
    const tokenPresaleContract = new ethers.Contract(tokenPresaleaddress, tokenPresale.abi, provider);
    const tokenPresaleContractWithSigner = tokenPresaleContract.connect(signer);
    const usdtContract = new ethers.Contract(process.env.REACT_APP_USDTALLOWANCE,usdtAbi, provider);
    const usdtContractWithSigner = usdtContract.connect(signer);

    let usdtAllowanceToPresale = await usdtContractWithSigner.allowance(signer.address, tokenPresaleaddress);

    if (usdtAllowanceToPresale < payDsoulUSDT) {
      const approve = await usdtContractWithSigner.approve(tokenPresaleaddress, payDsoulUSDT - Number(usdtAllowanceToPresale))
      const approveReceipt = await approve.wait();
    }

    usdtAllowanceToPresale = await usdtContractWithSigner.allowance(signer.address, tokenPresaleaddress);

    const buy = await tokenPresaleContractWithSigner.buyWithUsdt(payDsoulUSDT);
    const buyReciept = await buy.wait();
    } catch (error) {
      console.log(error)
    }
  };

  const payWithUSDC = async ()=>{
    try {
      const signer = await provider.getSigner();
    const inputpay = document.getElementById("pay-input").value;
    const payDsoulUSDT = Number(inputpay*10**6)
    const tokenPresaleContract = new ethers.Contract(tokenPresaleaddress, tokenPresale.abi, provider);
    const tokenPresaleContractWithSigner = tokenPresaleContract.connect(signer);
    const usdcContract = new ethers.Contract(process.env.REACT_APP_USDCALLOWANCE,usdcAbi, provider);
    const usdcContractWithSigner = usdcContract.connect(signer);

    let usdcAllowanceToPresale = await usdcContractWithSigner.allowance(signer.address, tokenPresaleaddress);

    if (usdcAllowanceToPresale < payDsoulUSDT) {
      const approve = await usdcContractWithSigner.approve(tokenPresaleaddress, payDsoulUSDT - Number(usdcAllowanceToPresale))
      const approveReceipt = await approve.wait();
    }

    usdcAllowanceToPresale = await usdcContractWithSigner.allowance(signer.address, tokenPresaleaddress);

    const buy = await tokenPresaleContractWithSigner.buyWithUsdc(payDsoulUSDT);
    const buyReciept = await buy.wait();
    } catch (error) {
      console.log(error);
    }
  };

  const claimTokensButton = async ()=>{
    try {
      const signer = await provider.getSigner();
      const tokenPresaleContract = new ethers.Contract(tokenPresaleaddress, tokenPresale.abi, provider);
      const tokenPresaleContractWithSigner = tokenPresaleContract.connect(signer);
      const buy =  await tokenPresaleContractWithSigner.claimTokens(claimToken);
      const buyReciept = await buy.wait();
    } catch (error) {
      console.log(error);
    }
  }

  const claimRefundButton = async ()=>{
    try {
      const signer = await provider.getSigner();
      const tokenPresaleContract = new ethers.Contract(tokenPresaleaddress, tokenPresale.abi, provider);
      const tokenPresaleContractWithSigner = tokenPresaleContract.connect(signer);
      const buy =  await tokenPresaleContractWithSigner.claimRefund(refundToken);
      const buyReciept = await buy.wait();
    } catch (error) {
      console.log(error);
    }
  }

  const pay_with_meta = ()=>{
    if(currencys==="ETH"){
      payWithETH()
    } else if(currencys==="USDT"){
      payWithUSDT()
    } else{
      payWithUSDC()
    }
  }

    if(currencys==="ETH"){
      ethToken()
    } else if(currencys==="USDT"){
      usdtToken()
    } else{
      usdcToken()
    }

  useEffect(()=>{
    // if(!metaAccount) return 
    loadBlockchainData()
  },[])

  const payment_fun = async(event)=>{
    const inputpay = document.getElementById("pay-input").value;
    const fiatPay = Number(inputpay)
    setPayInput(fiatPay)
  };

  const account_id = (event)=>{
    setAccount(event.target.value)
  };

  const refund_token = (event)=>{
    setRefundToken(event.target.value)
  };

  const claim_token = async (event)=>{
    setClaimToken(event.target.value)
  }

  const eth = [{tokenPrice:payInput, toETH:tokenETH, userAccount:account, quant:1}]

  const makePayment = async ()=>{
    const stripe = await loadStripe(process.env.REACT_APP_STRIPE_PK_TEST);

  const response = await axios.post(`${baseUrl}create-checkout-session`,{products:eth});

  const session = await response.data;

  const result = stripe.redirectToCheckout({
      sessionId:session.id
  });
  
  if(result.error){
      console.log(result.error);
  }
  };

  return (
    <div className='claim-container'>
        <div className='claim-content'>
            <h2 className='claim-title'>
            {"Join the "}
             <span className="gary-bold">$PAY</span>
            {" Presale Now"}
            </h2>
            <div className='select-button-container'>
              <button className="claim-button select-button claim-button-active" scale="md" id="btn-eth" onClick={()=>setCurrencys("ETH")}> ETH</button>
              <button className="claim-button select-button" scale="md" id="btn-usdt" onClick={()=>setCurrencys("USDT")}> USDT</button>
              <button className="claim-button select-button" scale="md" id="btn-usdc" onClick={()=>setCurrencys("USDC")}> USDC</button>
            </div>

            <div className='pay-container'>
              <span className='pay-label'>Pay</span>
              <div style={style}>
                <input 
                scale="md" 
                className="progress-input pay-input" 
                onChange={payment_fun}
                id="pay-input" 
                type='number'
                value={payInput} 
                style={{"visibility":"hidden;"}}/>
              </div>
              <span className="eth-label">{currencys}</span>
            </div>

            <div className='receive-container'>
              <span className='receive-label'>Receive: </span>
              <div className="progress-input receive-input" style={style1}>{tokenETH}</div>
              <span className="gary-span backcolor">DSoul</span>
            </div>


            <button className="claim-button" scale="md" id="claim" disabled="" 
            style={{"margin-top": "40px;"}} onClick={()=>pay_with_meta()} >PAY</button>
            {/* <a href='https://global-stg.transak.com/?apikey=8f020938-fd46-4977-bc01-059542dc79b7' 
            // target="_blank"
            rel="noreferrer" className="claim-button" scale="md" id="claim" disabled="" 
            style={{"margin-top": "40px;"}}>Buy To Card</a> */}

           <div className='pay-container'>
              <span className='pay-label1'>Your account ID</span>
              <div style={style}>
                <input 
                scale="md" 
                className="progress-input pay-input1" 
                id="pay-input1" 
                onChange={account_id}
                type='text'
                value={account} 
                style={{"visibility":"hidden;"}}/>
              </div>
            </div>

            {payInput && account == ""?<button className="claim-button" scale="md" id="claim" disabled={!buttonDisabled} 
            style={{"margin-top": "40px;"}} onClick={()=>makePayment()}>Buy With Card ST</button>:<button className="claim-button" scale="md" id="claim" disabled={buttonDisabled} 
            style={{"margin-top": "40px;"}} onClick={()=>makePayment()}>Buy With Card ST</button>}


              <div className='pay-container'>
                <span className='pay-label1'>Your Presale ID</span>
                <div style={style}>
                  <input 
                  scale="md" 
                  className="progress-input pay-input1" 
                  id="pay-input1" 
                  onChange={claim_token}
                  type='text'
                  value={claimToken} 
                  style={{"visibility":"hidden;"}}/>
              </div>
            </div>
            <button className="claim-button" scale="md" id="claim" disabled={buttonDisabled}
            style={{"margin-top": "40px;"}} onClick={()=>claimTokensButton()}>claim Token</button>


             <div className='pay-container'>
              <span className='pay-label1'>Your Claim ID</span>
              <div style={style}>
                <input 
                scale="md" 
                className="progress-input pay-input1" 
                id="pay-input1" 
                onChange={refund_token}
                type='text'
                value={refundToken} 
                style={{"visibility":"hidden;"}}/>
              </div>
            </div>
            <button className="claim-button" scale="md" id="claim" disabled={buttonDisabled} 
            style={{"margin-top": "40px;"}} onClick={()=>claimRefundButton()}>Refund Token</button>
        </div>
    </div>
  )
}

export default Cart










const payment_fun = async (event) => {
    let inputpay = event.target.value;
  
    if (!isNaN(inputpay)) {
      const fiatPay = Number(inputpay);
  
      const maxLengthETH = 3;
      const maxLengthUSDT = 11;
  
      if (inputpay.length > maxLengthETH && currencys==="ETH") {
        inputpay = inputpay.slice(0, maxLengthETH);
      } else if(inputpay.length > maxLengthUSDT && currencys==="USDT"){
        inputpay = inputpay.slice(0, maxLengthUSDT);
      }
  
      setPayInput(inputpay);
    } else {
      // Handle the case where the entered value is not a number
      // You may want to show an error message or handle it based on your requirements
      console.error("Invalid input. Please enter a number.");
    }
  };



  <div style={style}>
                <input 
                scale="md" 
                className="progress-input pay-input" 
                onChange={payment_fun}
                id="pay-input" 
                type='number'
                value={payInput} 
                style={{"visibility":"hidden;"}}/>
</div>





/============CartTime================/






import React, { useEffect, useState } from 'react'
import "./Cart.css"
import TimeVariables from './TimeVariables';

const CartTime = ({startTime,endTime}) => {
  // const [time,setTime] = useState(duration);
  // console.log(startTime,endTime,"====....");
  let bigToNumST = Number(startTime);
  let bigToNumED = Number(endTime);
  let stt = new Date(bigToNumST*1000)
  let edt = new Date(bigToNumED*1000)
  console.log(stt,"===>>>Start Time");
  console.log(edt,"===>>>End Time");


  const date = new Date();
const localizedDate = date.toLocaleDateString();
console.log(localizedDate)


  // useEffect(()=>{
  //   setTimeout(()=>{
  //     setTime(time - 1000)
  //   },1000)
  // },[time]);

  // const getTmie = (millisecond)=>{
  //   let total_seconds = parseInt(Math.floor(millisecond / 1000))
  //   let total_minutes = parseInt(Math.floor(total_seconds / 60))
  //   let total_hours = parseInt(Math.floor(total_minutes / 60))
  //   let day = parseInt(Math.floor(total_hours / 60))

  //   let seconds = parseInt(total_seconds % 60)
  //   let minutes = parseInt(total_minutes % 60)
  //   let hours = parseInt(total_hours % 24)

  //   return `Days: ${day} Hours: ${hours} MINUTES: ${minutes} SECONDS: ${seconds}`
  // }

  return (
    // <div className='utc-date'>{getTmie(time)}</div>
    // <div>{stt}</div>
    <>
      <TimeVariables startTime={startPresaleTime} endTime={endPresaleTime}/>
    </>
  )
}

export default CartTime






















/* global BigInt */
import React, { useEffect, useState } from 'react'
import "./Cart.css"
import {loadStripe} from '@stripe/stripe-js';
import axios from 'axios';
import { ethers } from 'ethers'
import { baseUrl } from '../../backend_Url/baseUrl';
import tokenPresale from '../../abi/TokenPreSale.json';
import usdtAbi from '../../abi/usdt.json';
import usdcAbi from '../../abi/usdc.json'
import { toast } from 'react-toastify';
import CartTime from './CartTime';

const style ={
  display: "inline-block",
  position: "relative",
}

const style1 ={
  width: "300px"
}

const Cart = () => {
  const [provider, setProvider] = useState(null)
  const [payInput, setPayInput] = useState("");
  const [tokenETH,setTokenETH] = useState();
  const [buttonDisabled, setButtonDisabled] = useState(false);
  const [account, setAccount] = useState("");
  const [refundToken, setRefundToken] = useState("");
  const [claimToken, setClaimToken] = useState("");
  const [currencys, setCurrencys] = useState("ETH");
  const [errorMessage,setErrorMessage] = useState("");
  const [startPresaleTime,setStartPresaleTime] = useState(0)
  const [endPresaleTime,setEndPresaleTime] = useState(0)

  const tokenPresaleaddress = process.env.REACT_APP_TOKENPRESALEADDRESS;
  const currentTime = new Date()

  const loadBlockchainData = async()=>{
    const provider = new ethers.BrowserProvider(window.ethereum);
    setProvider(provider);
    const network = await provider.getNetwork();
    const goer = network.name==="goerli";
  }

  //! Get token amount
  const getTokenAmount = async (payInput, getTokenFunction) => {
    try {if(provider){

      const signer = await provider.getSigner();
      // const inputpay = Number(payInput) * 10 ** 6;
  
      const tokenPresaleContract = new ethers.Contract(
        tokenPresaleaddress,
        tokenPresale.abi,
        provider
      );
  
      const tokenPresaleContractWithSigner = tokenPresaleContract.connect(signer);
      const RecieveTokens = await getTokenFunction(tokenPresaleContractWithSigner, BigInt(payInput).toString());
      setTokenETH(Number(RecieveTokens) / 10 ** 18);
    }
    } catch (err) {
      console.error(err,"----->>>>>>");
    }
  };
  

  //* Get token with ETh
  const ethToken = async ()=>{
    const inputpay = await document.getElementById("pay-input")?.value;
    const payDsoulETH = Number(inputpay) * 10 ** 18;
    await getTokenAmount(payDsoulETH, async (contract, payValue) => {
      return contract.getTokenAmountForEth(payValue);
    })
  };


  //*Get token with USDT
  const usdtToken =async ()=>{
    // console.log("USDT");
    const inputpay = document.getElementById("pay-input")?.value;
    const payDsoulUSDT = Number(inputpay) * 10 ** 6;
    await getTokenAmount(payDsoulUSDT, async (contract, payValue) => {
      return contract.getTokenAmountForUsdt(payValue);
    });
  };


  //*Get token with USDC
  const usdcToken = async()=>{
    // console.log("USDC");
    const inputpay = document.getElementById("pay-input")?.value;
    const payDsoulUSDC = Number(inputpay) * 10 ** 6;
    await getTokenAmount(payDsoulUSDC, async (contract, payValue) => {
      return contract.getTokenAmountForUsdc(payValue);
    });
  };


  //!Pay for token
  const payWithToken = async (tokenSymbol, allowanceContractAddress, allowanceAbi, buyFunction) => {
    try {
      console.log(tokenSymbol);
      const signer = await provider.getSigner();
      const inputpay = document.getElementById("pay-input")?.value;
      const payAmount = Number(inputpay) * 10 ** 6;
  
      const tokenPresaleContract = new ethers.Contract(tokenPresaleaddress, tokenPresale.abi, provider);
      const tokenPresaleContractWithSigner = tokenPresaleContract.connect(signer);
  
      const allowanceContract = new ethers.Contract(allowanceContractAddress, allowanceAbi, provider);
      const allowanceContractWithSigner = allowanceContract.connect(signer);
  
      let allowanceToPresale = await allowanceContractWithSigner.allowance(signer.address, tokenPresaleaddress);
  
      if (allowanceToPresale < payAmount) {
        const approve = await allowanceContractWithSigner.approve(tokenPresaleaddress, payAmount - Number(allowanceToPresale));
        const approveReceipt = await approve.wait();
      }
  
      allowanceToPresale = await allowanceContractWithSigner.allowance(signer.address, tokenPresaleaddress);
  
      const buy = await buyFunction(tokenPresaleContractWithSigner, payAmount);
      const buyReceipt = await buy.wait();
    } catch (error) {
      // console.error(error.message);
      let err  = error.message;
      let err1 = err.slice(21,44)
      // console.log(err1);
      if(err1){
        toast.error(err1)
        setButtonDisabled(true)
      }
    }
  };

  const bytokenTime = async ()=>{
    try {
      const signer = await provider.getSigner();
      const tokenPresaleContract = new ethers.Contract(tokenPresaleaddress, tokenPresale.abi, provider);
      const tokenPresaleContractWithSigner = tokenPresaleContract.connect(signer);
      const RecieveTime = await tokenPresaleContractWithSigner.presale(1)
      const startTime = RecieveTime[0];
      const endTime = RecieveTime[1];
      setStartPresaleTime(startTime);
      setEndPresaleTime(endTime)
      // console.log(RecieveTime[0],"====>>>>");
    } catch (error) {
      console.error(error)
    }
  };

  let bigToNumST = Number(startPresaleTime);
  let bigToNumED = Number(endPresaleTime);
  let stt = new Date(bigToNumST*1000)
  let edt = new Date(bigToNumED*1000)


  const payWithETH = async ()=>{
    try {
      console.log("Eth");
    const signer = await provider.getSigner();
    const inputpay = document.getElementById("pay-input").value;
    const payDsoulETH = Number(inputpay)*10**18;
    const tokenPresaleContract = new ethers.Contract(tokenPresaleaddress, tokenPresale.abi, provider);
    const tokenPresaleContractWithSigner = tokenPresaleContract.connect(signer);
    const buy =  await tokenPresaleContractWithSigner.buyWithEth({value: BigInt(payDsoulETH).toString()});
    const buyReciept = await buy.wait();
    } catch (error) {
      // console.error(error.message,"=====>>>>")
      let err  = error.message;
      let err1 = err.slice(0,18)
      let err2 = err.slice(21,44)
      if(err1=="insufficient funds"){
        toast.error(err1)
        setButtonDisabled(true)
      } else{
        toast.error(err2)
        setButtonDisabled(true)
      }
    }
  };


  const payWithUSDT = async () => {
    const usdtAllowanceContractAddress = process.env.REACT_APP_USDTALLOWANCE;
    const usdtAllowanceAbi = usdtAbi;
    await payWithToken("USDT", usdtAllowanceContractAddress, usdtAllowanceAbi, async (contract, amount) => {
      return contract.buyWithUsdt(amount);
    });
  };

  const payWithUSDC = async () => {
    const usdcAllowanceContractAddress = process.env.REACT_APP_USDCALLOWANCE;
    const usdcAllowanceAbi = usdcAbi;
    await payWithToken("USDC", usdcAllowanceContractAddress, usdcAllowanceAbi, async (contract, amount) => {
      return contract.buyWithUsdc(amount);
    });
  };


  const executeClaimAction = async (actionFunction, actionToken) => {
    try {
      const signer = await provider.getSigner();
      const tokenPresaleContract = new ethers.Contract(tokenPresaleaddress, tokenPresale.abi, provider);
      const tokenPresaleContractWithSigner = tokenPresaleContract.connect(signer);
  
      const claimAction = await actionFunction(tokenPresaleContractWithSigner, actionToken);
      const claimReceipt = await claimAction.wait();
    } catch (error) {
      console.log(error,);
    }
  };


  const claimTokensButton = async () => {
    await executeClaimAction((contract, token) => contract.claimTokens(token), claimToken);
  };
  
  const claimRefundButton = async () => {
    await executeClaimAction((contract, token) => contract.claimRefund(token), refundToken);
  };


  //*Pay for token with blockchain
  const pay_with_meta = ()=>{
    if(currencys==="ETH"){
      payWithETH()
      setButtonDisabled(false)
    } else if(currencys==="USDT"){
      payWithUSDT()
      setButtonDisabled(false)
    } else{
      payWithUSDC()
      setButtonDisabled(false)
    }
  }

  //!Presale Time
  useEffect(()=>{
    setTimeout(()=>{
      bytokenTime()
      if(currentTime<stt){
        setButtonDisabled(true)
        setErrorMessage("Presale is not start")
      } else if(currentTime>edt){
        setButtonDisabled(true)
        setErrorMessage("Presale is end")
      } else{
        setButtonDisabled(false)
      }
    },100)
  },[stt,edt]);
  //!Presale Time


    
  useEffect(()=>{
    loadBlockchainData()
  },[])

    if(currencys==="ETH"){
      ethToken()
    } else if(currencys==="USDT"){
      usdtToken()
    } else{
      usdcToken()
    }

  const payment_fun = async(event)=>{
    const inputpay = document.getElementById("pay-input").value;
    const fiatPay = Number(inputpay)
    setPayInput(fiatPay)
  };
  
  const account_id = (event)=>{
    setAccount(event.target.value)
  };

  const refund_token = (event)=>{
    setRefundToken(event.target.value)
  };

  const claim_token = async (event)=>{
    setClaimToken(event.target.value)
  }

  const eth = [{tokenPrice:payInput, crypto:currencys, toETH:tokenETH, userAccount:account, quant:1}]

  const makePayment = async ()=>{
    const stripe = await loadStripe(process.env.REACT_APP_STRIPE_PK_TEST);

    const response = await axios.post(`${baseUrl}create-checkout-session`,{products:eth});

    const session = await response.data;
    // console.log(session);

    const result = stripe.redirectToCheckout({
        sessionId:session.id,
    });
  
    if(result.error){
        console.log(result.error);
    }
  };
  
  return (
    <div className='claim-container'>
        <div className='claim-content'>
            <h2 className='claim-title'>
            {"Join the "}
             <span className="gary-bold">$PAY</span>
            {/* {" Presale Now"} */}
            {/* {startPresaleTime && startPresaleTime } */}
            {/* <p>{startPresaleTime}</p> */}
            </h2>
            {/* <CartTime startTime={startPresaleTime} endTime={endPresaleTime}/> */}
            {errorMessage === "" ? "":errorMessage}
            <div className='select-button-container'>
              <button className="claim-button select-button claim-button-active" scale="md" id="btn-eth" onClick={()=>setCurrencys("ETH")}> ETH</button>
              <button className="claim-button select-button" scale="md" id="btn-usdt" onClick={()=>setCurrencys("USDT")}> USDT</button>
              <button className="claim-button select-button" scale="md" id="btn-usdc" onClick={()=>setCurrencys("USDC")}> USDC</button>
            </div>

            <div className='pay-container'>
              <span className='pay-label'>Pay</span>
              <div style={style}>
                <input 
                scale="md" 
                className="progress-input pay-input" 
                onChange={payment_fun}
                id="pay-input" 
                type='number'
                value={payInput} 
                // style={{"visibility":"hidden;"}}
                />
              </div>
              <span className="eth-label">{currencys}</span>
            </div>

            <div className='receive-container'>
              <span className='receive-label'>Receive: </span>
              <div className="progress-input receive-input" style={style1}>{tokenETH}</div>
              <span className="gary-span backcolor">DSoul</span>
            </div>


            <button className="claim-button" scale="md" id="claim" 
            disabled={buttonDisabled}
            style={{"margin-top": "40px;"}} onClick={()=>pay_with_meta()} >PAY</button>
            {/* <a href='https://global-stg.transak.com/?apikey=8f020938-fd46-4977-bc01-059542dc79b7' 
            // target="_blank"
            rel="noreferrer" className="claim-button" scale="md" id="claim" disabled="" 
            style={{"margin-top": "40px;"}}>Buy To Card</a> */}

           <div className='pay-container'>
              <span className='pay-label1'>Your account ID</span>
              <div style={style}>
                <input 
                scale="md" 
                className="progress-input pay-input1" 
                id="pay-input1" 
                onChange={account_id}
                type='text'
                value={account} 
                // style={{"visibility":"hidden;"}}
                />
              </div>
            </div>

            {payInput && account === ""?<button className="claim-button" scale="md" id="claim" disabled={!buttonDisabled} 
            style={{"margin-top": "40px;"}} onClick={()=>makePayment()}>Buy With Card ST</button>:<button className="claim-button" scale="md" id="claim" disabled={buttonDisabled} 
            style={{"margin-top": "40px;"}} onClick={()=>makePayment()}>Buy With Card ST</button>}


              <div className='pay-container'>
                <span className='pay-label1'>Your Presale ID</span>
                <div style={style}>
                  <input 
                  scale="md" 
                  className="progress-input pay-input1" 
                  id="pay-input1" 
                  onChange={claim_token}
                  type='text'
                  value={claimToken} 
                  // style={{"visibility":"hidden;"}}
                  />
              </div>
            </div>
            <button className="claim-button" scale="md" id="claim" disabled={buttonDisabled}
            style={{"margin-top": "40px;"}} onClick={()=>claimTokensButton()}>claim Token</button>


             <div className='pay-container'>
              <span className='pay-label1'>Your Claim ID</span>
              <div style={style}>
                <input 
                scale="md" 
                className="progress-input pay-input1" 
                id="pay-input1" 
                onChange={refund_token}
                type='text'
                value={refundToken} 
                // style={{"visibility":"hidden;"}}
                />
              </div>
            </div>
            <button className="claim-button" scale="md" id="claim" disabled={buttonDisabled} 
            style={{"margin-top": "40px;"}} onClick={()=>claimRefundButton()}>Refund Token</button>
        </div>
    </div>
  )
}

export default Cart
















{/* <a href='https://global-stg.transak.com/?apikey=8f020938-fd46-4977-bc01-059542dc79b7' 
            // target="_blank"
            rel="noreferrer" className="claim-button" scale="md" id="claim" disabled="" 
style={{"margin-top": "40px;"}}>Buy To Card</a> */}














There are a few ways to show the MetaMask network pop up in React JS. One way is to use the MetaMask SDK. 
To do this, you will need to install the SDK and then import it into your React project. 
Once the SDK is imported, you can use it to call the eth_requestAccounts method. 
This method will cause a MetaMask popup to appear, 
which will prompt the user to connect their MetaMask wallet to your React app.



Another way to show the MetaMask network pop up is to use the ethereum object. 
To do this, you will need to check if MetaMask is installed and then call the ethereum.request() method. 
This method will also cause a MetaMask popup to appear, but it will not prompt the user to connect their 
MetaMask wallet.


Finally, you can also show the MetaMask network pop up by using the window.ethereum object. 
To do this, you will need to check if MetaMask is installed and then call the window.ethereum.request()
method. This method will also cause a MetaMask popup to appear, but it will not prompt the user to connect 
their MetaMask wallet.











 const totalSeconds =
        (endDay - startDay) * 24 * 60 * 60 +
        (endHour - startHour) * 60 * 60 +
        (endMinutes - startMinutes) * 60-1;

      if (totalSeconds > 0) {
        const remainingSeconds = totalSeconds - 1;
        setDays(Math.floor(remainingSeconds / (24 * 60 * 60)));
        setHours(Math.floor((remainingSeconds % (24 * 60 * 60)) / (60 * 60)));
        setMinutes(Math.floor((remainingSeconds % (60 * 60)) / 60));
        // console.log("minutes",minutes);
      } else {
        clearInterval(interval);
      }